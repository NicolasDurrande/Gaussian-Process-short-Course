%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: helicopters.dvi
%%CreationDate: Wed Feb 25 13:02:39 2015
%%Pages: 14
%%PageOrder: Ascend
%%BoundingBox: 0 0 613 936
%%DocumentFonts: CMR8 CMMI8 CMMI6 CMR10
%%DocumentPaperSizes: folio
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips helicopters.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2015.02.25:1300
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 856 2013-12-09 10:34:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.21, 2013/11/28
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 801 2013-07-09 18:10:41Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E702C6D29A39C16F7C66E0B2E15DCD2FC36A606C0EC22D1790CFDE6DA7CD418D
D85039E733793041E83EF250DD499477E7AB494E1AA44CC705A5FD535F05B261
2654089FB093C25C18720E3E3C72B00FE7E88EB45B3939415E3709B1E7508787
8B5E21214B74B124B5FE36BC5D810EBE149520CC13156B025DF2E518AA39C1C7
EE84AB0158FB4208CCAA455C3CF06981708E619B5116A10310B9B180DC2074E4
4FFAE3CA1C359295C7D2967195AFD2D94BADCE1E930304DAE34AD74C4F6EE4D8
8F814913C32C56CEEA4630B71E25E517C60BC448891030BAE0D3B1DF3067DEA7
F016221CB34AA4EB20552294F3AEAF6C9C22A817DE43146AE4E04FA79AA91C81
4B18ABD2C5597A11EC057BAEA084D203E197CD50146460DE396AC95850D198A6
6AD2991F011A878BC86753A989AA0B5800E4BE6B9E623761D24C0B7CB02DD90D
C8A2CBBEBFA8F587E6BBC957E31B764127ECC5CD4D1718F1294B62960C845C5A
2B81ECB5A523CB2915A925B1655FC301C72BE097018749375D92AA335837AE28
6EC255135C878B06D9774D944B8F077BFD9BDC2EB03C158F0B4D165480511171
EF9A30D87414ABA2676B03B3060A57AFC433A6E5D42CAB2CD2AB08BA4AE24FEF
2B67CD6C3EBB1C0E4AA0EA12349BEC2C0217289E81B36EEC9DE76321F3DF1B8D
279AD66877E0B05E0220FB8FDE96E8F11832AC295BB1D4ECD9FE817B07AA754B
523AB4F643BFDF588DF93B6925100D074E11C6D288042023656B73B1A1EC29E2
AC3B8B7A0430AEF9BF9DFCBAD0ACFF0F2E068EA70ED2D5CCB9AF9913BBC020A4
106A166B1B624A52ADE7D5B869078828BDF7EF38AF941D66D70C0675919F26D6
96F2A5A3DB8176F9C326B13607C4D2AD083467DFCE3EF958899D7EF260262689
66CD70F84D4CBC3149C444D2BFC6FFFC568810EE75CC001A8D44DF11AC914012
F66C731225B9420BF545DCF033EADDB8887D3DB2F8F5FC91792B97B32ADF930A
9FF05FE9FD570C5289218D585E471C9C3EC14CC670EE8D563CC659E4FEEDA0BD
B6997BCC7ADB0EBA902B2DE3CC959848E590C2EF04663CF953FBDFF9AB4F899A
017252FF9FCD56D1D594EB3808A7B14898276C07D73A209D539A899B48A1D1CB
242260694BC641C156B1C24A28E6C7C8AF7CF499E0121C9A7BA34B7277EE5FA0
09A0EE3D603BEA4173B001B902BD9176D2E877C9D1425DFFDE0AC72699CD940F
9615117E9F357456B934B287967B59BAD929E3E3E5254E82C1AB4000C80CAB2A
D7ACDF2DFE8BB6FEA60D3DA8BBEAB72B6FADD3429C5277D6A0D6E7C35AF7BF31
F66800947CFF7B757C512C8213DC79F8C7F9BB77FEFB9900553A2D6FD8CDE188
3016A9BE748675E49087CE084C9F61D451D10743B05264B21C4EAFC20D922600
78CAFB6412F3EC8A1DEB9844FABE985F922A5773D351FA2E39A58EA63476B41A
D739D0507F13D6DF421D7AF93EE9C1F377CC7CFBCCE5B52441257B033124C9DD
FEC7033B87072A685EE22861B67588DE228EA69D91D022C7E0E5C88120C65424
A3212813EE5D8D68525F0078CB2365966C16C454394D33268483F51AB55246E4
9F5E9E2BB7DDD67C0930D2044F4914F3B7EF86DDFF0AD82C6FFAF8AA0B6CD1DD
6A6437FEB46D0BCD15A0B347D6278467C1D0A712E33407446C53153DAB26003D
259D233FD1AEDBD771DB49CAC0249CBFF5CD5C5DD581AB31D2DAF0BDC96FFCFC
96F62F35E7B6C7D713EC38959DF9AF11D878D9927F60C6A91EE6CA76A5E167F6
1E1108E0AFEDC62B097378535470F3927A278C54B1C9A00F5358856802169160
E6A910BEA8A07DF7CA1A02609780E38ACD24D05AC43EC79B0BF5B620A7DDF395
08A64DF85DD08DF89E00E6C90151C0AB6E02D6EF716C2D25F4CA2B2F440DD6A2
526E693264CA540ED62946EBDA4E671048A5CE9662848090899973E98B9AA250
8BC185629810929997918AD37278D792815AE3C1717F18275C3D03CAFBF6F935
23529E97BCCDEBC4200248CBBB53CF1FD191060F133CEFD8A5B33CB5CAE46CE1
44846E0E401A112580E5DCF778CFF49E6A866FB8C86638E4EBD3F757C202000E
6918E4EA1B62E99EAA8AE7A68BBA124C17BAF1ADB2E156BFC0F0394F9E3B5442
B6DEA6E47EFC5005F3EB0F3500D992DA501F6EBB587CA4283A2E7C4EE876B4CB
299ACDA8CC37249A8848773D723E16B39C92989CFBCDAA5B2DA5644D27B248D9
226D224EF27347ACDC525C3A7AE6C87C5500ADECCB8A1417FFB8DB48C0822C5D
FA5B16F234FC4E903FC910C2636476C295329A93DAAC470AFBCDF2F3B094B18D
B963734E801EB3A7BC287980CB515706E7460C28E761B35671FE871BE3E1CE9D
52BB03E797B55EEC3C8C37A9EA2632C2BD10F5288B70BDB99521B26471B945BC
E9007A34F28B69898A3564484E8F43791B0B6A3D3352B73A16159E65E50C31BE
0DA9421898C1EF490E8DF18A4054925CB477D5F732744BFA8452BCF9F166DF95
FF6EADAA986AC4195AFBB1587DF1A400030C971D3952648BE3AC189170C0FB05
01C817274AD8DC0C54B872D544097251D6F9AAC8E7983CBCA412A49248817A62
A44869EA56F750CB7DA7B2B69E8CFA1CA6E118CCB6B99FDD4963C0C11FDCDB56
2FF851DC50D38C4CDC5F8FDD2711A4D5181B417D68F9936B69B2BD0F65C2C1D9
8719786E672D4A1609B2C9048F1BD59589AF1D28070D4AD1A1577B499593A1D3
9363878160693B4B48CC63EA4CF1F136C8C443D93CCE58CB919FDE61D01593D6
5CBAF1CAAE9D593669FABCC792B9C96BC539862B67E6503CA79920A53285AE9D
689D022E2820F8B542BB54EC244EB130702D353463D23ED7ED7A3439094F4CBC
951125E0A5BAE638626C4F91B8CB6EADA44C2E095A7E926B35989AC3CE05C336
B48402C0007B8F5C3E17167D2C291F6FB792A1029EF8CCB43F046DE1320BF216
4EBE7BB900A62CD4C95E51669527D759C5DC112B474D57C0D5844703DF6D504F
7DB8CF137363D6D3D9534ACFACB07EE89E5F124902EBAE22FE9FEEF3FA81453E
EBB108A719B5F9AD272A53CDFEBDF048E9F448A781FA1329890BF0B3CC51AD79
C1295595B12A725B5ADC9FCE2B3ED2436421C635A11D13F67B6B00F56EE09A6A
9023C5A4E125B0079B70C6B45CFD0371616C05D4A6F6A940AAFF15F450C29DB5
8B48808D821519EE36A0BE93CB3706D27EA60D0DEF25486257233F2AC7FC9ADC
F1F02029BA688AFD398B0DF3ED1A9262B55722D704F903D5780192C0DFCC7356
BD6CC789A2629EA262C4BB4FCBDA761984BEDFD23ACEF83EC71709FD957090DC
C90D2F2FD9A1E4B34940F931DF4E75ABA2412A9CF0078C6FAE73949FEEEB84D9
EF916C93479DC7D06625E42A6C65C1DFC731F48EA1E594113634E6D317E14323
EF1377748888907310FBF74BA05954C204B3E26805C50EEFCF516CED9E2A9362
5C595DD6FC8268C86454137C9559E814E1F376502889370C1085B10D2BADCA14
CBCC401078E63D3AC7CA7B631D93348BC13D20AFAE9A1059EDC316F11E171244
AC470FE64B1B5B1C9374BA4E736ABE56E81EAC92B693F93C8130A739751A9ABE
48EF115E2656C05391F551BF443780E94AF13313AADEF28BB6B2FA10394F2F7D
5423F6C3F8936656F0F49F07545721DEBC0B5D6DE28E766A3CDB4C6D16157650
766283944D7293D6FBA58E534BFC0C60D714E7D0BE679062ACE861231B56BDB7
6DEB34629B1BE26F6EE5A7FBA91C06EBE1C205A35344A24900D065C2D7437B2E
8792D921E155DEAC1BDA3F2EB8F99A089A03244DFB55C3EAC6B640CEF2C7701F
171BCF86F101A74D1C53B2EBFD0D9C243FC93FC26487741D2197D3EFF17E852A
B75F3DCBFE78EF2508D269D3176222ADAEA45CB06D93D4A53A95E7680478DD19
FEA2E668B993859E53C4712FB67283A729EA8BAA49D49A2CF9DBF79CDC8B253A
103F044913B98F9E4BD4A70ED43E9219C3D5A9A3A8CBB83500AB984DD7769D7C
A44B1749620E6C5508959A3F5F1C552685EC0F73A5494E4FA29AB216C5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI6
%!PS-AdobeFont-1.0: CMMI6 003.002
%%Title: CMMI6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI6 known{/CMMI6 findfont dup/UniqueID known{dup
/UniqueID get 5087381 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI6 def
/FontBBox {11 -250 1241 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI6.) readonly def
/FullName (CMMI6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 108 /l put
dup 119 /w put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFB83E8A2A6085DA11
61B1632328B94B21D3CBF2E7752D441A2C9A03F6681FDAB37C4B67D5857720F7
0C4BCEE266586738012A2237A85FCD0425DA7E8E8632543F5BD5D50F9DBAAE69
9E053AECA6027559DE42F7291EB381D866F1293107553809861D43508C6F2341
5E4FCC431AF4A9B3660386AE63E877DCF5E513D0D5702B98D58B34897FEE163A
75CD6F5A2196F91CE5060CA5E72F9C5F79D18F242EEE58135BFAB02D5CA430B6
D1B9A376849751A45E52577B1810C4F0C7F6C8196071D5B08FDB731C5384CCBF
03B460347E0CAC959E4A12620B6C2ED62E06A241D1637F418B5599A7FF3C1390
7AF66A00F7C31B4EDF249C56C268EC9D546CD0489DA51B734C8292CE7B3D9E30
71448C85ACC64FA99B2DEA91AA4CBCBBB9DE20833700AF96395DEEDA3FEB7D6E
D6E3BE4A62CBFA18BD0471C14F3A2FD025C88E8166A9830C5B5B94624A3D6482
D1A1D83805D0EDAC1C79EA858A523D9FA3356DF42BC01886E77F6AA6B04E4E3F
AD107D861FC626F0A439BC3F125D48649E5101BF79C71507FDACACBBB4C4335B
C41A5C15ADF1DF69E1D68C3EB9BE30BDD5385F81D26EC8F2F206C1C7032B9EB7
0392BBCA23B4693686AF8D2E1ACB2FBEE81D75667CD1DDB906BC5B675660ABA4
E63429F16623F20B6A040E4942107CCA26CF6C1F52DEED9EC7EB15BE4F18F2E3
9ABDEEAAEA9AC41E9F20C37C54B33F609F5835AE5A1EC9D674DC50FAFF6D3511
2198195590F62B3B8A6FC8C3431BB8895A2F910F0361062DE32CDA9A7F41E761
B09BD8545CAA2D7124B5688B54705AA52E4716E36C0303FEAD38E0510B3CB496
6C30B115C37E02043D47B4ED796C671E30360800EC13F0F0FF3E0DBF5A642396
EB0F39A9DAF0974678EA1D041F08BD73867065DA91B044EF2AB15FAA6546031E
189936C1FD302BCFBE55EAF369DBA4895DD0996BF7292762551A86C8A3604E9A
8AD29E38BF6FD40172051EBE7C694249F3378ED0139D37EEA3ADB66F3A80A1D9
9C3655F054CACE93BA4AD42DC78A03F42455ED1BD5C122F234F21ACEB8FEFF9E
3BFE0DB2DA6D368478299ED63912A234ADB1DCCF1E519AD20772B71F8522B5DB
24E9658BDC1333D76F07F63D81F7A51D12C445ABF698092A24E5E5C36A52206C
0C41F7DCA529BB0A4D146DB6B4B341459FC17FFA357CA5F93DBCF30B61374613
4846D619423BCAC59B7EB40C14C70ABD985754A0094C98350D01FE9FA371B0F4
38884690DC7700C49236EF68BD6E806E8937AD8B77648F552C0C907007465A76
1475BDD3FBE1CF69C706E703226471C249A3448F81C240ADBE4B5474216D0235
6B0816BB6935A2704E851E20C002F85B653BB0700915B358DDC168ED3FAE3D91
8280A5CA5C2708D622B03DC47A70E5FFCAD5A7C8D9AD563857BBEF92A3BDB588
8B5B55CC9B960F20CA4AEB598DA8488004DEDBC9671488011E836D9D8B6251BF
256D08E6F1808E9D498449DF1F18E48B310D561D4DD3146C2BA64D960E66447F
6DA8B07194E3BFAF662C00737BB7222B55A5CC206A1C46F252ACF93D2063BABE
2BAB874C01AEC438D3F86AE37C9D7FCE4077F5B5785E12C1E0B685134CE2E8A2
2E4DCDDAED2D53D13014E428FAAE22447763D4693E82600F850CA4A49E1ADC5D
C8DFC16E97B9F6164095CF7F31373B591F815621F45DFF77BFBF89EF60C9F50F
0C2FBBA4EA9602E197B9447FAB6AB57B19B1C801DAB66BF7D263F6572B9EEF88
E06744C1FE197B8EAA71E1EB67716B7CAB30C859A2D1B2DB95ECED02B83FBA32
E62F97EE4403FADEC936CC8DAA161F7B509B2723BA2B735572A80D7D087E6395
6A9D34D5963E3C6E37F307C66D1CE551D2F055BFCC7360FBE93ACAFDE2B1A849
37FD373F62BB23C1A2E3DF61C9452A8C995B03D44D6210A968C6293B4A3BE662
C7B0B59E6EF6D53FD293B2C290436B0C448E7D15A63533DE321643E53C85EF8B
060C434E46A736EA617EA00D185323460E77B95C49070B035194A2E7693C3B15
104ED7F56FCADABE49F27F9A576B354C574B5BAFFFC57FE9AF02FBD87B8874A1
24C53826659BEB1EC50446AC26EF3A95877ED3D81D33A8BC1BF7473FB9C11ABA
0F27B38EEBDF77D3D3EA63AE6022DB0D4F1125DF274B86EF0A4A263E108D6044
7A885F5E87362293A53F457CBA6C911D23653DA7CE4BB7D4FF4481AB97C0DD81
C13515F0E3BF8A7E8DE2CE69B25BA9C185D9BF31A65DD290B0D4FDF40B61E2D9
AF92BC6468B3F5AB5D5B88710C489ACC69198D697055B39AB3DE8B3733825C5E
6E763E2698574381A01352A7042A36EA96D17DD2EEEAFF04ABF7BF7D877B0FC7
B6BA51BA994D431F472B6EC4B4C327399576470A1773BCBAC61CDBF0F95DA6A5
0BE5239B7E9CD39E1E4D27EF6695D1FB56D4CA2C2370509547D6D01273CBE6E0
66A696C35D2D0282CB8C85D7B1C51453A0AD0BC80E1D183D11AA78879643D9D9
A3D0B2BD8EE3EDF29483CC5871426232A20CB058EEBDAAED85378B163425C270
B0F7BB46B7D1B89CF84E6A06791195FB17F11F34A2548FE424DE10E376B39A2F
DD9B0BA2F2FDF3ED4AACBD0D60E67C0749D6DCBDE6E79041398DF3FC8D9B6CFC
693B870683CC425C52705902DFD324E157C9829F25B14A057AA92AFA17F156FB
0BA949698EAA0657B03D9538288D887959EF24A427EE7EDE47F304A1A6A715FA
2966273831B5B3A9C11021C153E67A73FA606FE3233C3DB217404C6AED6A4C59
DD4C2A98B31AF5604D8DE8354448B4CEC66022E756B0056CD32E9B002ADC712C
0545C2C16D9457E271D98A4ED7DDE01BBD1856F5C3DA28794D2C7951FE2FE6D9
18643CEEC41CA4A3464D3D3A102653CD6EAADA59CDD44918523B8811C2ECCABA
AC0D188F5E07B37AFD56006B10B32EDD179F4DA693EEBF4DF5425D996585F21C
8780A4D23D24FB0618C12DE65CAD42A0138E28A100257978EDCAD168C55C6F07
78A067F0299890356C2A184820A554FB07448395ECE36C45211757552E288ED3
7DFE46CB92EB2070442AFC85864A45000C4854D728096AD3D4C552EFC26DB6B9
C340358451B50AF9F1B35C2E32D495DE85B5848D78940270DEFC07A14D960730
878B5B55916FB40FD805116C9C2AC8C6D4645DA67A978F1C6FE705EC188DBF7B
FE7AD6769F2EEC4A9B05306D5BCD6EC3A240D6A29ED07D1D82E697DC8CC391AA
015DB6BCD1DA5C9A5A7BE3C5936681215E859E9837027D108A54F42AB24E38C2
4A7D8CF3264AE049D4B1AF48BBC564BCC88AF19D37DD81CCC431D0C554DF29A6
94ABDF8126EE4FE1DFB78559B9BF36FAFEC9791049C865694F9E2FFB7A308FEB
EF0195FAA6BFE7A081B65C5125623903828372F117EE17E588B2FA26DC9AE37D
9A6F0043C019624D3D87AFDB4B90C46AEA78919CEF5D7ACEE316F30EA0229742
55E02E0E2533CAD78CE9BD6E0260A695D776ABA229D89CF9BEA92CE0397821A8
830A557021B3B90CE0B07A4B34C24337FA3FA4A3728B6E013BA01071CA7FA667
6FFB4BA3A28B5D5614ACD4E80E00938C2589CC6CF885A260AF7589240BF8987B
20A19FDAC73FAEEDD93EBCB3D46F735214164AFAF1A7828FE96E2BF7CE1EA46E
FC1FC4527A0ADF2B81CA51E3D96F3E786511AF00FDDD9764CD3178362CF9DEE5
F05D100EC21A301F40FEFC3EF05AFEC140A9466AE68FCFD6CAC1A143BAF2B7BF
D0DF808F0CF87FE2399CD9D2DD424227CA7D4073ED002CD555FBE8057A797B60
313D18ECDD779FA7289D4E7BF82D95A7535CE3F0F4164AF239AC666653736654
C13E436B526EC5A1DC97E1D85C4EB563C7061AE1E81F0B38BC45B17C15FDB0DA
E5F6332721A925D4DD5A97BFF3E3F11D4F4F43BAE4E73A294D314527397F03CE
AFD12DDF9D07DAD8D6C8EFAFC2F52E20FBF62026810C0C31A1EF71FBD612654D
C68B7A24112F0ABDD20EFF3DADBE447AF9CE568F873ACE72B63283CB26B89BED
4B3315F26084453B1EB0877065A76E7B704B27F93DBEB365574A78E92FDB4B82
D6ED91A1728F571FC9CAB636A6E81D0C1C4F5E3F6F4574B6EED48BB61EFDDC80
1831E2AB9327B37881F0CA5D5265575F210BF4BCD8653B4193F74E3FF65028F9
2968B8127C68CA2919DDF529EC882EE99901146CA629A07B4DC59E7868DBE083
6E546C5769655EF6628FE2EA78AC891D130108192053D5056A7BD06C09592AF9
6310B3586A2609DB94CB0079550358F5547B9FBB2B77917A327EFE3F972C7263
54076627B4DD74638C3105FB25DA246484799D5326EE80503F18672B893289CB
1FFF8D3F662FB33E93025D86803551A8A1DE363D1534BFA3EF968871B19FB189
DAD841C177E2AC98B6B69A78048221C5EBBBB86511939D3A9963B3BF021185AB
0B26CA7D0A779DC2F7693C7E48286BD60EE46615E31B93FB0E6992AE20C792A4
72AD6FFAD6682D0F606807D7AE63A6280B5967FAB889DCDF0F76347CE302FAED
A59E1B1AB785D9D0ED695A0D05DD3DF0EF0B275AFCF9EC7031E1357E99A3DB85
B4D137567875F7580E2BEC96B08C97ECB40876000B610E0BFE81E7884C9BBAE6
6BE9C2C612475396BC10EC7FFBD1118A7971FE1971DFD0CB677ECA65DD837B5E
C7D36FE9F20A15A941F1E77C11093C902DF5B7639580B9C0E4AAD13518E1901C
1162FA095F301848770C6C618E371A0AC3463D0D94221EFCC0884B21300194B5
97E03BCD5C4878CEBF352EDD1D2173B56C9B6A08BF3F33419DF226E1633CC5CA
A88A57AA85E21657569916E9B4B79E51B5535A57B2D6FA3EED1D0AA32DC0165B
12F8F5A681040B456D8DF175AD6053A2954F327F4EB4CD453A056FB1701242C2
59755058640C62632C764E002CE928E6B908BB137C28630A3CDBC7C34CF2B643
FFAFF20E345A86F31756C78A8EE2B9B1C5DAB2C863B29A44190770FD90BC6AED
0C25942BBD6A370C21650947B49AC8EB6825BE65DEFAFDDA32007754DFE0273F
B995B8986E505F95E58A3F8873545DDA6F3FFAADE992F3FF7B2DAB76D663280E
CF2BA18BC8871A7C361AA3600B192948CB918FEB0F2900AF2BCF169576828325
449CBF0C7AEDC299FCBB061F491469B9ED1D56771A03F9F202550E17FDB15B51
4772B2F06E6AABA4027D13E8730999532DB2475630D2F8EB98242E36F5B45A94
2D8083014B63A806BB9A01906143482C614B5CFBE8C5354A3F2438B2160F6DC0
81AFCEB201EC67F66DC5808C907A3C6CB664F444D24095D9A11D4978A7B57037
87C67552FD59F5713D0FE03462F9A1A323BB3EFF0AAD61B1792CB109CA9AE4D4
D7F7FBD3FB91258DCFFB4634669FA13E03C0AF699165311CBF37D24378022787
87D1320ECF878F859149B2F994E700A32CB7253297AC58753E4583A08A1F83D5
CBFF10F2D26D71CDB20E1C69A666E9C4D23BB0E6BF1097FBBB204EB736E61FF0
C3FDE1986938F8099694B9F998B3C735770FF21F73B1A6B750498BFD21184F11
5E6AF0F1FBB08EAD436C4AADE1E6B815F5E58988C113B4B2335A340798BFB201
40586D0BCD6AF5A08CE9AA042910197F47D98CBB4411A6D435A46F46B3964F85
032D7F8D880732276A8FD24DA772F642F06C9F3EB4C9090AE4A3AAE67D8768A1
7B2A57E15B7FC626450372F40E3EE28D8D997CCC8CC89C644461D1110740407E
F6D884A0503E05AF830994AD0CEEA924D935749F6EE9F2DD65A58ECD59229918
A303C90E19E9C411FAF24AD5E9B786178F8182692CDD508A4755123B4A594AF1
A8E7287456C1CE2CA485CF4CF9DEE5238AA7328DA204816F98B7EF49EDB30875
3CF8C48E0465BFFA8F2A1CFB6A8F165B63CC80F54C669D02BFD9A0EA0FDE2B40
D69F0101AE4D2C10185AB10953019FE7D373BF40C2F6D4E36693F118866D1267
12BA7987ED4313E8635DA02A4FC1F7815105F8EDFE8004A8801CC1AFA8D123FD
1768A6C39E838BD489C6BEFFD3BDF650DF48D5F8D99DD5A2E8AD235F2CAE8BC9
C13AE9B214CF3FBFAC7BDFA54CB6E675273330608BD35600775FFB2A96FF648E
DF55A78B43CF54CABC0DA8D574CC5C5C62E9D658EC62035EA5028767749E48D5
658212BD39C7E76ED0C6F3E0A1D138A0DB8BE574987AF1E43070F1F12C560009
F48993FAC935EB56A5793BA13C28293601D268B4880F9BC33D553FF3B6A7900D
37900BD3B4B558C84BBAB09B4BC2B14D32E49596DA090E586E28D560903B9744
7D014EF2A6AC4F711A025DBBC841F1C1C93BA1F8327DFE33C803A0993050D590
C7AE262261DB7D04B9DD91F89927161A69E14BB2A48D29578410E312A4793101
B6CD65B298988AB798F45B76E1F58BE24DB207C7E07014E17525B436D41FDB28
D1072CBEB526E17C72DDA00ECDD06394940DEE8BD02CD3C81BFD12BE0568A459
0F53010A0655942C932905FEE87183CE357887E2ED286DC1E89F2F401CDDDFA9
B418F218D4115043892882C09F2E3749D4671E75AB1AD01C78F59FE3F54276D2
A91512C21C68180CCC0E147E834002D7799FF393842CE88BEA714672E1952C9F
7CEF2FD0115B0E292079909A7775769341A7888CE6063537ACFF225B4F396972
41BF46C599D278906F3BCFF81DF941BF5888DE8A53CB0A2D71610CDCDCC1760A
7844F89FCBB892AEA853CF5D967648995559EFE852C95D2EFDA2CF063500F88D
2C83B615618831267BD8F5438DC53C6433CE7347E9C55E103B450EBED6229219
20E979C00B0B9D86345FC3A8EA2B049B7E148A7AA1C859AFE93381DA74CA578F
8FAAB28175D5B57F6A74F9869B2F530009E953913C6925D0045CB2E817A17742
3C5B7574E9BF3BA7B769C161C2496EA2D346B4E19E434120FE92A0ED3F4A9ACC
A8BFE55F04D17DF035D01FC0B06182D8C27B6D32F36551B9AA56D61FB6A34254
D0DF918C6716D8D05B973C8BAD5AD52C06EF3C6503D4E0F7F791511C79AE74E4
4B707612149D583C5D96E534CB45F1E7CA5B23642B1BDBC881FD8E4F66CCEE96
7CC0509B5CFB0B3596682A81E682DAF6AE58F605FD7A1F414F62572298AD8491
B76D0A23B4AC731FB8E7682F506B5CC02F7029827FFD866EF4DBF56E07E7743A
D42CE65B38EBDEA193CE5B172E87DC88452C3DE192E363EB9DBEC4EC65F53002
BE9E94180F73B53CE1E8EE9333DC86DF5FB2561FA1F9B2511962CBEFACA739CC
38A286651CEFBF451FF6568CFFBA8AA68555181147C1CDBA18C4F5C77BA8548D
2B1BA37E05EAF7F69879C3ECBD02783028CB1A8649842EB71023F89CEB36CEEF
A9B04E9ECB0577536B88ECE7C1D81B0D6D5A478F8E92DF83D194759437088D7B
E93C6AFD0CC6D568E60E2F1265A6613F97A6C4068C8EEBA70F6CC4E88A80F65D
EA7B498395390A74BA57221B86611D3EE5DC4632F139CA8A15E5B9D2DC97088D
7CC65197CD93F4803BE4246394F40EDC2CB4904BC273C597F13C8DC680245A3F
F1AF2D7BCE5D69E9CFC81E5E9F46927C5F55C719AFDB2CB1AF2E4D55B0E3ACA8
6BBBCF253CCFF8F02B8542F296CED0EB8A06A88549DC959E22C3D6C48F310452
22B32C44B046A61A4F7F8AED613DCD3C464DB2280D56E517CFD16DC32C83EACC
D3E936D2F3A883B265444D818393E30EE3AA59E6FA73DDC421F5A0FC8442F89D
CCE98189ECADC080F1973E14012C2B87F6A8289D7E1B8958E2220FA1C68EF82D
01A2B3516F320EE84950A6A54963ECD6F606EB5693F6A0BC74CE2B5AEF26AFE6
7BF5D5357C3D53CFF50F60599F2165B6E742A331B47F46D977FC721867EC9CE3
7E9BFA2149C9E3A47AF0D0EDBF29C1E6D92BFBBEB52F816EFDBA9CFF83AC072C
5FD264F8F24CD5A1C0F68399FF4B29FD77C4A54D82965234120D6C0729362536
D15D42DF49C81B451A7A77B7A4466E3099EA853C2BD21FB9293BD31B0C9032A6
2A6C25685EA1B1A8AC938B6BA40D5F8F12BE0F26EEC75449BF2BF273A25B8C7B
2E9D4135A72516DED4E5D11B4FAFA9F04738AB6D813FFE3A2CC65C8921D109EC
9969F4CC38A0251F73DC438EE9D46F3A933DA3AA4D50728579BEE9C523E3C07C
53EA9D7D2992FC48BA7FED08AD5B85C9C36AE1BBCE781F892C26F360AA0F762B
38D365A252CA53A2CD81EF8FAF132FBB9557980BF4CD6E689DF96244F0AF3404
7C9A78CC1B9DC0F21DA774896CBAEABC8428730177C85D8CEB574997666D7E97
D9D62D197A8DA08EEF65F35206EB34ED901FA8C3AA5808AE5FEC89C6E0F248C2
3120669FE6C29F3EDE0C04360E9F58018BAE5B4766B5AA09C14348DEB97011E9
695462F063376C42A648FAF237660B13A22B2D9B22E9F4C7B3C5320543BC11DC
EB42A666953FCFB0C1204901A8F4ECC959962843B535326C548E9C8564461D73
B30F09F0AD52B360E44EDCAC3C176B4E1270874A10545F6CC432531255D1B550
0EF1DA23B2E1FD6F77BA618D70B2B103973F87C5C19C9ED95F24E2E46FE3ACEC
47E986B5D0E8DE823715B06E7A5899D76FFEE9B06B393D1E0A89163B7E791334
88BA0EC3899405BA16E110170E8C05F3468936042CB5AB8AB2B1EA0D86618C2C
694857862B3C55E080F395126A3886E501D2D1B45391CFDB814FFB820A7AFC3B

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 65 /A put
dup 84 /T put
dup 87 /W put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF728D2A654E52B6A6C90A3A
725F86627D7C3EC5AF5AC512976D35FE42AACA3FECB401788D0BFFD9F4743BB2
EC5B4E7891F216DCA5A69E917A171E0069A03FB214ED307DE947225049D46E0C
4707503F09811A597A9113921AAC23AB1CAA9866F81A02BDF349FAB129F23E86
E384C043053055938D42ACBF9F0EE86CEBEB011BD5BB7D59360C8C44357DF473
7964EB4DA2EDFC44A24AA194DFF3495E425BAB69118ED72F0D07C72DFB31A87A
502B95B1D741ADC785B39D4E1ADA30F5BAB2D6F3B11B7407E66109BB482A2CA6
F246813BF6EFB2FBCDD1B3081D65BCA3E219BD8146944CD3DB7F8BCCA79113DF
A36C51A2F170FED1E50936B0CE6E8E90BC1E3354440FE9712E7FD2FB7C08376D
21ABAC38613815D9EF6B94C54CB84F77A7C4A2D956F308EB7FEAEB28D8D1A314
74D29643F603A01509AAC153908D07A1198E764AA47A2E133D144CC89C1B1EE7
E3DBB45FA75C47B76B6DD5863994B5324D3EE0460DE367AD7FE8664C56CBAFDB
DF3BDE1BC6F0818B2BAC7901B8EAAB82C252C4A7A520FB66CD650574CE6D0E3E
17C4CEF209E0E5EFAEB34884DBD2D5728B1459A0EFBD4674C050554FBEC1E08A
196BC23D6C5034C3F40EC0C67F67EF146E955F4A5ACC21A2137534A92CC74EB7
D1B770A950A36F59DC7029C1BDC6BEC4D61FC8AA0B0E5BB3392629C794FAA97C
14E5EBC3149E253AEB37E86E55A56B0D360034038D0B5828BDB30079367A67CD
5B3E3F6F50046E266D81E0EB1F905271BFA81A54FC31452F1F5C6874AFF6645E
D2561B471DFE60722F2AC4E44A004DAD70D6DA9F18C4B2AC852ED0F69948DCFD
3767F51E28D7C9F3A8829BC46F21DC46CF84AC991959A8ABD7A7377E2F04E4D9
948FDFBA0187F10446CF4C188546296577C6F5A90356B5EF056556B47416DD67
1C3F05ECCE1E6541BBF5493093658DC1C3857E3DA29A3A4117DD22F6D001AD57
05B555C9A09ADBF725000283DC0448ACAC02E0C2A0D8ADED50FA6133C00BA26E
3C15F6F88AC2D4061B0E5082A54C929685A0E938C987CF0FC47E4EC36EB3B92F
CF34CE47842A714205AFCC76D372047BD85DA6A07E0FF05B09B663CEC52F6680
7A90CBA923CB294DB5331E155D012C013D4890EEC2A29EA970C9E6CE4988592C
1A4CAAD5DD2BA728A4AE72401655B19A21F9B2AF2B73929877E42B4C58CB41F5
21227641E2147314B1E2A18B19B6153BB1551711D682342957D8F0D9E09F0959
7759769483F581B0AFFC4F21C0874616075DC0AAFA52DD77B8850ACF306232BE
AEEF6439A72F0412F4BF33A839E58E2ECF13F4A46A55B2D55E327CE935E63524
CC833D5BB0DD1024F4E3FB1867B612F281C98D14D50E8594AF4F2E1B857BC56C
E45214A4A38CA9186DE3D67464D8F1D683F638D66C9BA806A353EC10790076CF
B16A7719F46CF9C3BDA37C68F40E3B34A0E715610FF0186805BE5541A2F4A10A
F4EE80B0351A3193F29B6DAC0218B6902D5CD7A6CCAE8E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /fl put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 118 /v put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1DF53F4EDCD63203F9F2B9C8502D62A080C4BD2E323AC6ABD80B76C3A25
C5D2D7209315F9638A80BC546A84D1E194FB1D00B0E521EFBFB2A3825821E00A
DD5BE51290D0411DF498A033F7EEA3F7B4CBA8F386B4B1F68C56541AB4959A52
AAE75B9F801ED6A788447A30B37BA156F2F23F6553DA0AACA34BA031BC59E0D9
AE3EB6A92389741CBFEA5894ED849413CC8847B8DCCF9AA36F617A8BB9318388
92A0B67A346D8859FBE8F9621551B41F5A77E0B6700EF76EF6B3C08DAA4073DB
34EF4EB2EF6B437F1C50C56AC57A270A9337393D159A4940D19611A74C808ED6
BB316B2145D6A4A26136D8428B35CC18D6C4275E3E4616418F305B5F7239BDAC
0D87D54984223BD7F7933AB0E7B6755883263D2B737648AB2D02739EE21761F7
989DA873469AB3EEC142C5360CF621018041269ED78A6557184E46881D33A0BE
355E51044ACF5FA881F4889C42A922FE4E08B66664B1CC43FF249FA39F9AE76C
628C5EC2D8E4B30E723701B7A8472C3811CB4841D77114D329507B2B7F1B96A7
70A1599AC31409AB1B60A9DFD84898614EEDDA9A05ADDE8F42F43B0AA0E32BBA
68EB94452185A3FB3A5C65093D604362D8281D19EC9FFFCE576EA204A0FEE477
FD5C75C5E375CEB428B465D624710184693A3B1CFD4FB8BE949FCC4B04617657
0FA931480A40CA97742F6B0A372570E8A73119980A0B231B352C11DA52B19A4C
24299A4AAEB12450FE5CAF8BF7FA992B174BAAC652C443AABF9A0F7628BA6677
6CE25FBBFD47A97E66EC74A91A6B6F58915B6E457B3224C9A7F782AD3B5BAFBD
4DBAADA60B59D1551E1C1E950FCF0A064072AF96926D98C8547A467C0440CF4F
0702E50C1A4819B9C63C51C4C256C71054D45491F3A404919A5804A9EF33F987
06D7B08F15B6FBAB660DFA654FE39BBE30B8F00B0FB11E19B3FAF0B0112A61DD
DED9D09DCB47F8038F7BD4769BB43FA519F0F1CEB1E1F9782AF0BDA0EFCFCBA2
E75D83B54A9F35BA24C282624814F6C72B80EE17322BB972A8ABE210B6AD10B9
5CD7A83D44FDF8C762E42D13F66CFA66245093171CA3A4439C3B3A90409D9CA8
8230DC473D96ADAAE67B371E8EF39A8988DDA2C2A1700BC957807057FDE594D5
829C1724AD6448F7B8E728653D4177B8D6CBBA1C0971F8665270A1028B44A991
F28543EA8BC58F5E9E9FAD6256398FD6D1FBE5A2CC8A876284B44B4F5E138FDE
AD27A82236F6C430202642B35BBEC0C679D5098C5CF725C67A793DF9BBEC96AF
B948A30E35C0F6C19143AB58A03483E7D46CF3D1549277A5F34457E5BECE17FE
32890865DD5ACF4BD1AF9BD00A0EEB1EEF5DEA4B56DBF0AB953A1ABE2D7469D0
8CDE5A2DEBD9115AE1EDBCD052673D13BBBCC66589D46E777538AB884F429829
E23E7934FE2498BE0944B88F5B02734F9A2EC877C85190D64E98FAAC0ED076F5
06CB12F130262D4F136CBEF23E4DA092F7DF98E3DA91C32375831F063F166288
50E5A1A1337BFE39928F5251A16EA96A49E50ACF7D95E8BD51FA83D34DE9BB73
AF0AE804DB9D1609355BBA02B2258F7E652B23DB3AFACDC1D6D7FB150C3ABA84
B8A0E733366EFE014DC1073228224B1C9AF2D1892B5E59B797D58185103FCE54
26EB2182CABEF7245F7615B1BDCC6C5F693786818F5B1556C7E2EBD68B28A9C2
7A3D9EC676010EFBAF4095324835AE3315A8A8CA46DEBE245ECAAA11EF4F227E
05C453E6FC6A5079A9A9A30AE923E72949AD7295B5923BC47B0C6958309A1D2C
F1C728097662ED95731BD1D725E21A309896E3ECC944087A3BE5994AD204789F
6DD72F0E4415A65AAF61D8E232A81E1EAE782AAD5BC54327AB0BDACE6260C15A
A5D1162D31E95E58E0B7C41F7DE821DF785362CC7ED4886F2386A69B34FDD5C1
FC3CC91116679F8487FBC7578406578DD2173871DAC83EAEAD5A39264E36915D
2A5598D0B5A97F894D46E1E5D6644061B161919B14793BF4DF0FA25245522147
B61590904CB23D0C7E9EE21A03F31D08167C3AE9C21D6A41DA13E45131E4B64B
8D804BAFC06BB8CF341FA6CF0CCA2D16BD2F802AA9F7B61CE6DFEEB28C07833F
B14BF6C952DD6403F57F4B61CFFBD1188099CCD8E9C0A421C18060A8DB485F6A
FDFA5D6ADF5D2DBB79EF6EAEE5B652AD9F18E68B3BB643EE7761F73B6C74CC4B
C72EB277AED07F616421BA4FAFA268B85D30E9BCC4848D939ECC6C7BAB1E5C6A
9C371899A85A659470D7A6BDAA621D071661517A50E5B27BF6EE734972792AAA
E88FDE0A26F13389773773E79874122937FD4FFCAE9C95618BBFE3A012DD5541
28DC611B2269E8C6D3A47D223799B701647E4EF5D0F74CF5A410EAF4283E939D
EAA0EC574AB17F5032CA3E3F031EA9B140866B304FC32A69F738ECDBF4E0723F
A8E524CBE86FE53F355B63CD5D744BA4B2C8D0263A850F4ED0D19925B1C080F0
162EE4541BB83994E479A1C1A2F71AE123C112CB49D741DD21B3301ED0B92D7A
C498245B27A688FD262A45AAD1BE8D83BA150F3BFE2BA059D4A1D61123F162B0
7B79D5D826A729A1D9328DE62564D95BD81880A1EB08AD138CCCD18B595F8B18
EB66CBF6612B3CC5EF1A3D0665F7E498C9457EBF9EF2797B7F7B0FF995016DCC
86F0776551704D303BB4AE227A387F924CF38EC1060D9CB75D4174A394170A14
D9972DF54E6FCC10481FE4D5C9B91C58C1566D8CBA0978F6C12DC93D4B1D3503
F2101D4843D5ADEB2DF352494DB898E7F7769159FD90DDE0F2C94A77E413FB3A
19D9B8B4252B48239D7855DAB0C266437278D2BB102326F5BD8A67B264BA3599
E962F0D2BC811EFEBA996E711D20117F4706613384612031413BF3D69ECD3A5B
25B1AC5BD5B08BD030271A0607E081C36B99A09C74DF534F50A0D999DF59B7D3
D90DA4C67B2EAA143E1FF60306332C830507F767A469650EA567FB66A67AB2E9
F7E8BAFCD420849D881E383249256346674352F8ACE9694B4A646B42651A9C9F
3665E12766915F6C196E6EAC04883B970491740BEF35EA1453A478C9D0BF8135
58F11F23B3D3497D423C47A4EEC77B84B2BE84A8DD77230F00A329EA1171AA52
2008D75FCACB37AE24F6222B7E97CB2EAB56530076A902A793375104831536E2
F66A2B9F9627829E3C1FB216CEDEFBE1F492F33E41AD816946161D60C4F0CD7B
18BA2EF2F5EEFD94387D4CC82224AD1324F0F3C04E42DD96267D4E29493AA03A
EDDB91F4C2D52875556C05A6ABCC40925A9E89A650C07E9E9612AD77737D7121
ACAD119C7B3DA54D8831FCBE8DE3DF3B773D349EF0F1D1F8C42549ACAF177841
EDDA15115F9A0B4A84417E51FDD50FAB43895BAF5E6685A482F18615A4331881
D1026439B9CC1F9962389DB02CD5A8235CC2F683795674FDEB694456FF9D8FBD
B8AE66B80B90772C1C304C90A006637278E172BBA329C7D0399F92D085311231
B4B03DC70B1CA49E5201BBEC6A41038C32EEDB85FEF662E7535EAA09A43E6CE1
5E5FB1016A8DD004BAC22906F5ADEC9D2922D64EF2A20C3542C134A8F2B415DD
9BC714D15EC4D5F2D0FA3FD0F808145E15D8112DBE4FCD27B78C4A99575401E4
95D90447B62B3B84A7EED88F205F3C9B21813629ECE8A2BC5AC914EA933DAD4C
B0B1D14A602B7FE084784C48F950641458D6FBD9C15AF49852F52173FD559C62
AC638310AA6C5EFB0E1E20FC52E07D890DD24D5D682D06BA1185E00988BEE9B1
E43D1AFAC25D6F0DCA3D597FBAD8C7EC8E39FCD4084F807FF8C058BBC8643D85
6057136971C2ECDF96D59A3DE8BA6254C703B0A71FCF554AEC42AB7B766D58CE
7B0F34C44867ECAEB5527584B01DDD48E3EA7964A02931E97E64F0B83A7977A8
E050FFA48E985F541D578FBBBDF37D5E6F1D45EA33635C8947B9B5C3481CB273
0EFD104FF650EA996F19E5ADAEDA2F0E4B5D7F9DAAFB018C91E0C0BBFC102AE9
73473C1C4E6AC9FD5954985B87749DDEDC19A436A1F7ED3F8D3E59B877CBD327
23AF5491F43FFBBED76680D54EB07E2DF3CF34ACD9B21C425C94965124AF855A
F2CF466F700E0AE0E60F95567BD8100C9FC075647FF4201A91CBEC17BB370B2C
E7ABE66CB87AB95D57BFBD949289ED0E078C5BFD002A24F4E6CBF359C306F6DA
508CBB6EEAE86D23D952DD601582D2ED48686D7E7EA626F677E51FCA242C8C30
EB9414A1FC8246226C5B8C335AC1FE79DF2E3FAECDAA7E21F64CF52596F213D0
08AFDA046883F8837517D46350DB7B0A8D48244BCF374181F204CCD279079460
38D78F8784B1266D238D85A1EA5D2E121496DCAF6F0039B226B746A1E9A62FED
8802FA3CC7CAE4CEF2E692FEDF2C7C26B248ECDC6297B1F497491C298B6C06A9
C3EB32578D4FB2B3BC7EF24D3E96263D6F229E4B7D091F076A3979CB941D5C5F
61F9BAEC3085B7E5C720B3C4721205DDAB231758BD411B62FF7A9246F8A4172C
B9CD5B4DFA8B127F51A9614C42951E0281904B98CD1F99CB1A9E0D4A36869E1A
AA2420B7F3E4F02A58E2AB71A77F602530A983AD924472D4CC3B8F90D58AD7A8
DB776E1695E5A64650E7432374842FD2B2A6D26A32B3E7BB3F5FC5FF1B17CD41
B51D46CFC4B6C9041B270B3C80A445D251A2A6E2A6E3528D6E641A9802274086
1A4D69E8A1B10FB052951AAF9D478D36E36335979E5389D6268A19264FF91464
4AFF3B84720D1BC6BFCAD05AA4880CE60BB7BE9A2318FB0132C11F47141E98FB
3F79DC93EBFB7760BE3FF60CF71423AD628465AD7045327368A665D4C5CBD3BA
65ACD22F98B8EA76DD09AB40C2922DBBC8FB3DFFCF6EE28B3FED4C8F63944439
48D6DF0562F1354B78B4FBD962D0A3DFD5BF0AC9B0816CF972C3E351E3422A70
B645D1FD7DAB0138CDD5AA2E55475BE3B496A439165AA3259A088C49E67A9419
6F00B9087F420804D4E731C73A266B31655196D6F11D6D677F2E704EC3CF3B07
45A40E4E361CA07237F6C732B4720A756E7092D3F224D9B2F72CA82271F2B6C0
EAEF8FC5C443895D15F88513D200E724DE66A808CF1801E5B13D850BF0FFDAD0
323F4B8F77A28A76016A2E035656DC152B2CD12041A9D839D1E7B990C6AB3D64
155232A5F5988771BD821EB10DA403F449BBA07E3606491E5B968749D0484329
5C66C2D2BC55F42094D11CF4A47DB8E23A568A0E8D7DB84C557D6090FA0D84AF
EFC3DECD7B6727BAE8F2625373C9EE9428CCE762D784BD6DBC28EDF7ECDDBB52
F8DA13163584F060A6777629AF9EA8B268A5428C72C26877BAD95E0D6A61C445
CCBD14E9163188C36FBD3BA2107F5F4674116C6B8B19875AF9769AC6F93E6947
2CC48475649E014774F43550DD4200128F53A3DADFEAE54B79142482B2FE78C4
1CC5FF6BB5CA9692221AF78FACA3BA997E9B34EC6D744879D555D3955FCE03BB
CA9DD36A9C1C126A46E2777E1E3EA8205B157455C357F74896975E773FFACDAB
FAF9AC1A92E195308FCA7F32AE97BE8AF1BE53AD3CE440655EC0E515AEBCDFBF
A789DE2A11B9BB7EFC41CEF0C5BBB205D0F2044232E327AFE01D0DBEDF97EAB4
357E7472543C7E290C46BCABEB5D7EC2A41922DA218F12F7AE99F6F555C098FF
0EE126DB1599B56266179A2388A5F2AE11B1BC6D67577F8E7E94306720E0F5A2
0D230A5D62FFACE55CEFAFA8CC7A5570E7CECF05FF0729BD2978FCE42687D128
B2485D3E7DAC396EB1092B8DC5D533C2649A8E35ADAEB9C2401558C8FEEE4C77
42604A7E56645FE5309B840C6271855B7D8E0535EC113FE0EBD220ECF74ABB46
9CF34CCA6765247AF4539E8631CDE87E89F0E0EE8A37D88FF0D1D1625F7056C7
818530B00ECAF4CF6FD6C1B898F3C7440B80C46AC71A11AA74F7220CB3E2A225
3FCB164A2956AA1BD6762F42792A7FD7538DE3C21C65ACF1C20684934883D32B
F3D47FF731C461E7B85AF9D78C915230FB833F4C1DCEE2DF305FEBEA86
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40277095 61534431 1000 600 600 (helicopters.dvi)
@start /Fa 198[42 42 42 42 42 42 42 42 42 42 48[{}10
83.022 /CMR10 rf /Fb 136[44 10[20 108[{}2 49.8132 /CMMI6
rf /Fc 168[67 2[41 18[53 6[20 58[{}4 66.4176 /CMMI8 rf
/Fd 135[37 1[37 1[27 1[28 1[39 35 5[20 39 35 22 31 39[55
3[35 35 35 35 35 35 35 35 35 35 34[39 13[{}23 66.4176
/CMR8 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: folio
/setpagedevice where
{ pop << /PageSize [612 936] >> setpagedevice }
if
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black -435 -435
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -435 -435 a -435 -435 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -435 -435 a -435 -435 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -435
-435 a 0 TeXcolorgray 394 4168 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -188.62663 -34.1432 -188.62663 -34.1432 -28.45274 -84.82509 0.0
-84.82509 128.13632 -19.91682 128.13632 -19.91682 389.15733 0.0 389.15733
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -188.62663 34.1432 -188.62663 34.1432 -28.45274 84.82509 0.0 84.82509
128.13632 19.91682 128.13632 19.91682 389.15733 0.0 389.15733    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 389.15733    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 128.13632 -19.91682 128.13632    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
84.82509 0.0 -84.82509 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 318.02548 -19.91682 318.02548    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 210 4627 a Fd(forev)n(er\015igh)n(t)311
4745 y(exp)24 b(1)239 4864 y Fc(W)306 4876 y Fb(l)349
4864 y Fd(=)c(4)p Fc(:)p Fd(50)214 4986 y Fc(W)281 4994
y Fb(w)350 4986 y Fd(=)g(2)p Fc(:)p Fd(98)252 5100 y
Fc(T)293 5112 y Fb(l)337 5100 y Fd(=)f(6)p Fc(:)p Fd(63)234
5219 y Fc(A)287 5231 y Fb(l)331 5219 y Fd(=)g(9)p Fc(:)p
Fd(17)1989 3286 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -294.8755 -34.1432 -294.8755 -34.1432 -28.45274 -107.25784 0.0
-107.25784 108.45264 -19.91682 108.45264 -19.91682 448.09293 0.0 448.09293
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -294.8755 34.1432 -294.8755 34.1432 -28.45274 107.25784 0.0 107.25784
108.45264 19.91682 108.45264 19.91682 448.09293 0.0 448.09293    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 448.09293    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 108.45264 -19.91682 108.45264    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
107.25784 0.0 -107.25784 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 376.96107 -19.91682 376.96107    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 1805 3745 a(forev)n(er\015igh)n(t)1906
3863 y(exp)24 b(2)1834 3982 y Fc(W)1901 3994 y Fb(l)1944
3982 y Fd(=)c(3)p Fc(:)p Fd(81)1809 4104 y Fc(W)1876
4112 y Fb(w)1945 4104 y Fd(=)g(3)p Fc(:)p Fd(77)1829
4218 y Fc(T)1870 4230 y Fb(l)1914 4218 y Fd(=)f(10)p
Fc(:)p Fd(36)1811 4337 y Fc(A)1864 4349 y Fb(l)1908 4337
y Fd(=)g(11)p Fc(:)p Fd(94)p 0 TeXcolorgray 1930 7279
a Fa(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 516 3727 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -219.13249 -34.1432 -219.13249 -34.1432 -28.45274 -99.46477 0.0
-99.46477 138.67628 -19.91682 138.67628 -19.91682 443.84126 0.0 443.84126
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -219.13249 34.1432 -219.13249 34.1432 -28.45274 99.46477 0.0 99.46477
138.67628 19.91682 138.67628 19.91682 443.84126 0.0 443.84126    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 443.84126    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 138.67628 -19.91682 138.67628    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
99.46477 0.0 -99.46477 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 372.7094 -19.91682 372.7094    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 331 4187 a Fd(forev)n(er\015igh)n(t)432
4305 y(exp)25 b(3)361 4424 y Fc(W)428 4436 y Fb(l)471
4424 y Fd(=)19 b(4)p Fc(:)p Fd(87)336 4546 y Fc(W)403
4554 y Fb(w)472 4546 y Fd(=)h(3)p Fc(:)p Fd(50)373 4660
y Fc(T)414 4672 y Fb(l)458 4660 y Fd(=)g(7)p Fc(:)p Fd(70)338
4778 y Fc(A)391 4790 y Fb(l)435 4778 y Fd(=)f(10)p Fc(:)p
Fd(73)1935 3583 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -236.53166 -34.1432 -236.53166 -34.1432 -28.45274 -71.51347 0.0
-71.51347 160.77388 -19.91682 160.77388 -19.91682 483.87854 0.0 483.87854
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -236.53166 34.1432 -236.53166 34.1432 -28.45274 71.51347 0.0 71.51347
160.77388 19.91682 160.77388 19.91682 483.87854 0.0 483.87854    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 483.87854    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 160.77388 -19.91682 160.77388    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
71.51347 0.0 -71.51347 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 412.74669 -19.91682 412.74669    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 1751 4042 a(forev)n(er\015igh)n(t)1852
4160 y(exp)24 b(4)1780 4279 y Fc(W)1847 4291 y Fb(l)1890
4279 y Fd(=)c(5)p Fc(:)p Fd(65)1755 4401 y Fc(W)1822
4409 y Fb(w)1892 4401 y Fd(=)f(2)p Fc(:)p Fd(51)1793
4515 y Fc(T)1834 4527 y Fb(l)1878 4515 y Fd(=)g(8)p Fc(:)p
Fd(31)1757 4634 y Fc(A)1810 4646 y Fb(l)1854 4634 y Fd(=)h(11)p
Fc(:)p Fd(36)3125 3365 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -262.79453 -34.1432 -262.79453 -34.1432 -28.45274 -71.80522 0.0
-71.80522 117.05237 -19.91682 117.05237 -19.91682 447.7517 0.0 447.7517
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -262.79453 34.1432 -262.79453 34.1432 -28.45274 71.80522 0.0 71.80522
117.05237 19.91682 117.05237 19.91682 447.7517 0.0 447.7517    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 447.7517    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 117.05237 -19.91682 117.05237    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
71.80522 0.0 -71.80522 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 376.61983 -19.91682 376.61983    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 2941 3824 a(forev)n(er\015igh)n(t)3042
3942 y(exp)k(5)2970 4061 y Fc(W)3037 4073 y Fb(l)3080
4061 y Fd(=)c(4)p Fc(:)p Fd(11)2945 4183 y Fc(W)3012
4191 y Fb(w)3081 4183 y Fd(=)g(2)p Fc(:)p Fd(52)2983
4297 y Fc(T)3024 4309 y Fb(l)3067 4297 y Fd(=)g(9)p Fc(:)p
Fd(24)2947 4416 y Fc(A)3000 4428 y Fb(l)3044 4416 y Fd(=)f(11)p
Fc(:)p Fd(62)p 0 TeXcolorgray 1930 7279 a Fa(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 726 3903 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -206.8546 -34.1432 -206.8546 -34.1432 -28.45274 -124.78162 0.0
-124.78162 184.41185 -19.91682 184.41185 -19.91682 522.4332 0.0 522.4332
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -206.8546 34.1432 -206.8546 34.1432 -28.45274 124.78162 0.0 124.78162
184.41185 19.91682 184.41185 19.91682 522.4332 0.0 522.4332    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 522.4332    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 184.41185 -19.91682 184.41185    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
124.78162 0.0 -124.78162 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 451.30133 -19.91682 451.30133    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 542 4362 a Fd(forev)n(er\015igh)n(t)643
4480 y(exp)24 b(6)571 4599 y Fc(W)638 4611 y Fb(l)681
4599 y Fd(=)c(6)p Fc(:)p Fd(48)546 4721 y Fc(W)613 4729
y Fb(w)682 4721 y Fd(=)g(4)p Fc(:)p Fd(39)583 4836 y
Fc(T)624 4848 y Fb(l)668 4836 y Fd(=)g(7)p Fc(:)p Fd(27)548
4954 y Fc(A)601 4966 y Fb(l)645 4954 y Fd(=)f(11)p Fc(:)p
Fd(88)2796 3802 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -219.03653 -34.1432 -219.03653 -34.1432 -28.45274 -124.57756 0.0
-124.57756 101.79878 -19.91682 101.79878 -19.91682 384.3391 0.0 384.3391
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -219.03653 34.1432 -219.03653 34.1432 -28.45274 124.57756 0.0 124.57756
101.79878 19.91682 101.79878 19.91682 384.3391 0.0 384.3391    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 384.3391    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 101.79878 -19.91682 101.79878    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
124.57756 0.0 -124.57756 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 313.20723 -19.91682 313.20723    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 2612 4261 a(forev)n(er\015igh)n(t)2713
4379 y(exp)24 b(7)2641 4498 y Fc(W)2708 4510 y Fb(l)2751
4498 y Fd(=)c(3)p Fc(:)p Fd(58)2616 4620 y Fc(W)2683
4628 y Fb(w)2752 4620 y Fd(=)g(4)p Fc(:)p Fd(38)2654
4734 y Fc(T)2695 4746 y Fb(l)2739 4734 y Fd(=)f(7)p Fc(:)p
Fd(70)2636 4853 y Fc(A)2689 4865 y Fb(l)2733 4853 y Fd(=)g(9)p
Fc(:)p Fd(93)p 0 TeXcolorgray 1930 7279 a Fa(3)p 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 769 3692 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -254.39885 -34.1432 -254.39885 -34.1432 -28.45274 -130.03749 0.0
-130.03749 166.90805 -19.91682 166.90805 -19.91682 497.10245 0.0 497.10245
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -254.39885 34.1432 -254.39885 34.1432 -28.45274 130.03749 0.0 130.03749
166.90805 19.91682 166.90805 19.91682 497.10245 0.0 497.10245    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 497.10245    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 166.90805 -19.91682 166.90805    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
130.03749 0.0 -130.03749 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 425.9706 -19.91682 425.9706    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 585 4152 a Fd(forev)n(er\015igh)n(t)686
4270 y(exp)25 b(8)614 4389 y Fc(W)681 4401 y Fb(l)725
4389 y Fd(=)19 b(5)p Fc(:)p Fd(87)590 4511 y Fc(W)657
4519 y Fb(w)726 4511 y Fd(=)g(4)p Fc(:)p Fd(57)627 4625
y Fc(T)668 4637 y Fb(l)712 4625 y Fd(=)g(8)p Fc(:)p Fd(94)592
4743 y Fc(A)645 4755 y Fb(l)688 4743 y Fd(=)h(11)p Fc(:)p
Fd(61)2451 3405 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -288.99358 -34.1432 -288.99358 -34.1432 -28.45274 -72.56065 0.0
-72.56065 107.94293 -19.91682 107.94293 -19.91682 406.12149 0.0 406.12149
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -288.99358 34.1432 -288.99358 34.1432 -28.45274 72.56065 0.0 72.56065
107.94293 19.91682 107.94293 19.91682 406.12149 0.0 406.12149    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 406.12149    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 107.94293 -19.91682 107.94293    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
72.56065 0.0 -72.56065 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 334.98962 -19.91682 334.98962    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 2267 3865 a(forev)n(er\015igh)n(t)2368
3983 y(exp)25 b(9)2296 4102 y Fc(W)2363 4114 y Fb(l)2407
4102 y Fd(=)19 b(3)p Fc(:)p Fd(79)2272 4224 y Fc(W)2339
4232 y Fb(w)2408 4224 y Fd(=)g(2)p Fc(:)p Fd(55)2291
4338 y Fc(T)2332 4350 y Fb(l)2376 4338 y Fd(=)h(10)p
Fc(:)p Fd(16)2274 4456 y Fc(A)2327 4468 y Fb(l)2370 4456
y Fd(=)g(10)p Fc(:)p Fd(48)p 0 TeXcolorgray 1930 7279
a Fa(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 475 3244 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -294.10922 -34.1432 -294.10922 -34.1432 -28.45274 -94.55449 0.0
-94.55449 143.53145 -19.91682 143.53145 -19.91682 443.06715 0.0 443.06715
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -294.10922 34.1432 -294.10922 34.1432 -28.45274 94.55449 0.0 94.55449
143.53145 19.91682 143.53145 19.91682 443.06715 0.0 443.06715    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 443.06715    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 143.53145 -19.91682 143.53145    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
94.55449 0.0 -94.55449 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 371.9353 -19.91682 371.9353    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 291 3703 a Fd(forev)n(er\015igh)n(t)374
3821 y(exp)24 b(10)320 3940 y Fc(W)387 3952 y Fb(l)430
3940 y Fd(=)c(5)p Fc(:)p Fd(04)295 4063 y Fc(W)362 4071
y Fb(w)431 4063 y Fd(=)g(3)p Fc(:)p Fd(32)315 4177 y
Fc(T)356 4189 y Fb(l)400 4177 y Fd(=)f(10)p Fc(:)p Fd(34)297
4295 y Fc(A)350 4307 y Fb(l)394 4295 y Fd(=)g(10)p Fc(:)p
Fd(53)2254 4229 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -175.44353 -34.1432 -175.44353 -34.1432 -28.45274 -119.78233 0.0
-119.78233 106.04828 -19.91682 106.04828 -19.91682 318.13531 0.0 318.13531
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -175.44353 34.1432 -175.44353 34.1432 -28.45274 119.78233 0.0 119.78233
106.04828 19.91682 106.04828 19.91682 318.13531 0.0 318.13531    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 318.13531    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 106.04828 -19.91682 106.04828    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
119.78233 0.0 -119.78233 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 247.00346 -19.91682 247.00346    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 2070 4688 a(forev)n(er\015igh)n(t)2153
4807 y(exp)25 b(11)2099 4926 y Fc(W)2166 4938 y Fb(l)2210
4926 y Fd(=)19 b(3)p Fc(:)p Fd(73)2075 5048 y Fc(W)2142
5056 y Fb(w)2211 5048 y Fd(=)g(4)p Fc(:)p Fd(21)2112
5162 y Fc(T)2153 5174 y Fb(l)2197 5162 y Fd(=)g(6)p Fc(:)p
Fd(17)2094 5280 y Fc(A)2147 5292 y Fb(l)2191 5280 y Fd(=)g(7)p
Fc(:)p Fd(45)p 0 TeXcolorgray 1930 7279 a Fa(5)p 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 718 3117 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -271.42465 -34.1432 -271.42465 -34.1432 -28.45274 -123.84949 0.0
-123.84949 105.04366 -19.91682 105.04366 -19.91682 427.82617 0.0 427.82617
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -271.42465 34.1432 -271.42465 34.1432 -28.45274 123.84949 0.0 123.84949
105.04366 19.91682 105.04366 19.91682 427.82617 0.0 427.82617    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 427.82617    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 105.04366 -19.91682 105.04366    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
123.84949 0.0 -123.84949 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 356.6943 -19.91682 356.6943    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 534 3577 a Fd(forev)n(er\015igh)n(t)617
3695 y(exp)24 b(12)563 3814 y Fc(W)630 3826 y Fb(l)673
3814 y Fd(=)c(3)p Fc(:)p Fd(69)538 3936 y Fc(W)605 3944
y Fb(w)674 3936 y Fd(=)g(4)p Fc(:)p Fd(35)576 4050 y
Fc(T)617 4062 y Fb(l)661 4050 y Fd(=)f(9)p Fc(:)p Fd(54)540
4168 y Fc(A)593 4180 y Fb(l)637 4168 y Fd(=)h(11)p Fc(:)p
Fd(34)2821 3706 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -200.47426 -34.1432 -200.47426 -34.1432 -28.45274 -129.3893 0.0
-129.3893 188.35136 -19.91682 188.35136 -19.91682 484.45596 0.0 484.45596
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -200.47426 34.1432 -200.47426 34.1432 -28.45274 129.3893 0.0 129.3893
188.35136 19.91682 188.35136 19.91682 484.45596 0.0 484.45596    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 484.45596    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 188.35136 -19.91682 188.35136    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
129.3893 0.0 -129.3893 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 413.32411 -19.91682 413.32411    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 2636 4166 a(forev)n(er\015igh)n(t)2720
4284 y(exp)k(13)2665 4403 y Fc(W)2732 4415 y Fb(l)2776
4403 y Fd(=)19 b(6)p Fc(:)p Fd(62)2641 4525 y Fc(W)2708
4533 y Fb(w)2777 4525 y Fd(=)g(4)p Fc(:)p Fd(55)2678
4639 y Fc(T)2719 4651 y Fb(l)2763 4639 y Fd(=)g(7)p Fc(:)p
Fd(05)2643 4757 y Fc(A)2696 4769 y Fb(l)2739 4757 y Fd(=)h(10)p
Fc(:)p Fd(41)p 0 TeXcolorgray 1930 7279 a Fa(6)p 0 TeXcolorgray
eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 273 4219 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -189.51143 -34.1432 -189.51143 -34.1432 -28.45274 -70.27873 0.0
-70.27873 120.53429 -19.91682 120.53429 -19.91682 339.02553 0.0 339.02553
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -189.51143 34.1432 -189.51143 34.1432 -28.45274 70.27873 0.0 70.27873
120.53429 19.91682 120.53429 19.91682 339.02553 0.0 339.02553    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 339.02553    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 120.53429 -19.91682 120.53429    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
70.27873 0.0 -70.27873 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 267.89368 -19.91682 267.89368    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 89 4678 a Fd(forev)n(er\015igh)n(t)172
4796 y(exp)25 b(14)118 4915 y Fc(W)185 4927 y Fb(l)229
4915 y Fd(=)19 b(4)p Fc(:)p Fd(24)94 5038 y Fc(W)161
5046 y Fb(w)230 5038 y Fd(=)g(2)p Fc(:)p Fd(47)131 5152
y Fc(T)172 5164 y Fb(l)216 5152 y Fd(=)g(6)p Fc(:)p Fd(66)113
5270 y Fc(A)166 5282 y Fb(l)210 5270 y Fd(=)g(7)p Fc(:)p
Fd(68)1604 3676 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -254.94675 -34.1432 -254.94675 -34.1432 -28.45274 -90.02756 0.0
-90.02756 147.55214 -19.91682 147.55214 -19.91682 495.07278 0.0 495.07278
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -254.94675 34.1432 -254.94675 34.1432 -28.45274 90.02756 0.0 90.02756
147.55214 19.91682 147.55214 19.91682 495.07278 0.0 495.07278    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 495.07278    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 147.55214 -19.91682 147.55214    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
90.02756 0.0 -90.02756 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 423.94092 -19.91682 423.94092    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 1420 4135 a(forev)n(er\015igh)n(t)1503
4253 y(exp)25 b(15)1449 4372 y Fc(W)1516 4384 y Fb(l)1559
4372 y Fd(=)20 b(5)p Fc(:)p Fd(19)1424 4494 y Fc(W)1491
4502 y Fb(w)1561 4494 y Fd(=)f(3)p Fc(:)p Fd(16)1462
4608 y Fc(T)1503 4620 y Fb(l)1547 4608 y Fd(=)g(8)p Fc(:)p
Fd(96)1427 4727 y Fc(A)1480 4739 y Fb(l)1523 4727 y Fd(=)h(12)p
Fc(:)p Fd(21)p 0 TeXcolorgray 1930 7279 a Fa(7)p 0 TeXcolorgray
eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 723 3186 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -263.04851 -34.1432 -263.04851 -34.1432 -28.45274 -124.39696 0.0
-124.39696 142.06618 -19.91682 142.06618 -19.91682 436.04732 0.0 436.04732
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -263.04851 34.1432 -263.04851 34.1432 -28.45274 124.39696 0.0 124.39696
142.06618 19.91682 142.06618 19.91682 436.04732 0.0 436.04732    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 436.04732    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 142.06618 -19.91682 142.06618    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
124.39696 0.0 -124.39696 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 364.91545 -19.91682 364.91545    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 538 3645 a Fd(forev)n(er\015igh)n(t)622
3763 y(exp)24 b(16)568 3882 y Fc(W)635 3894 y Fb(l)678
3882 y Fd(=)19 b(4)p Fc(:)p Fd(99)543 4004 y Fc(W)610
4012 y Fb(w)679 4004 y Fd(=)g(4)p Fc(:)p Fd(37)580 4118
y Fc(T)621 4130 y Fb(l)665 4118 y Fd(=)h(9)p Fc(:)p Fd(25)545
4236 y Fc(A)598 4248 y Fb(l)642 4236 y Fd(=)f(10)p Fc(:)p
Fd(33)2536 3313 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -247.67728 -34.1432 -247.67728 -34.1432 -28.45274 -94.05824 0.0
-94.05824 97.3105 -19.91682 97.3105 -19.91682 355.15436 0.0 355.15436
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -247.67728 34.1432 -247.67728 34.1432 -28.45274 94.05824 0.0 94.05824
97.3105 19.91682 97.3105 19.91682 355.15436 0.0 355.15436    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 355.15436    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 97.3105 -19.91682 97.3105    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
94.05824 0.0 -94.05824 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 284.0225 -19.91682 284.0225    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 2352 3773 a(forev)n(er\015igh)n(t)2435
3891 y(exp)25 b(17)2381 4010 y Fc(W)2448 4022 y Fb(l)2492
4010 y Fd(=)19 b(3)p Fc(:)p Fd(42)2356 4132 y Fc(W)2423
4140 y Fb(w)2493 4132 y Fd(=)g(3)p Fc(:)p Fd(31)2394
4246 y Fc(T)2435 4258 y Fb(l)2479 4246 y Fd(=)g(8)p Fc(:)p
Fd(70)2376 4364 y Fc(A)2429 4376 y Fb(l)2473 4364 y Fd(=)g(9)p
Fc(:)p Fd(06)p 0 TeXcolorgray 1930 7279 a Fa(8)p 0 TeXcolorgray
eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 345 3052 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -151.6154 -34.1432 -151.6154 -34.1432 -28.45274 -78.9666 0.0 -78.9666
111.71617 -19.91682 111.71617 -19.91682 320.97469 0.0 320.97469   
/Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -151.6154 34.1432 -151.6154 34.1432 -28.45274 78.9666 0.0 78.9666
111.71617 19.91682 111.71617 19.91682 320.97469 0.0 320.97469    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 320.97469    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 111.71617 -19.91682 111.71617    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
78.9666 0.0 -78.9666 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 249.84283 -19.91682 249.84283    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 161 3511 a Fd(forev)n(er\015igh)n(t)245
3629 y(exp)24 b(18)190 3748 y Fc(W)257 3760 y Fb(l)301
3748 y Fd(=)19 b(3)p Fc(:)p Fd(93)166 3871 y Fc(W)233
3879 y Fb(w)302 3871 y Fd(=)g(2)p Fc(:)p Fd(78)203 3985
y Fc(T)244 3997 y Fb(l)288 3985 y Fd(=)g(5)p Fc(:)p Fd(33)185
4103 y Fc(A)238 4115 y Fb(l)282 4103 y Fd(=)h(7)p Fc(:)p
Fd(35)2012 2520 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -215.72568 -34.1432 -215.72568 -34.1432 -28.45274 -121.82285 0.0
-121.82285 116.8952 -19.91682 116.8952 -19.91682 355.82904 0.0 355.82904
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -215.72568 34.1432 -215.72568 34.1432 -28.45274 121.82285 0.0 121.82285
116.8952 19.91682 116.8952 19.91682 355.82904 0.0 355.82904    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 355.82904    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 116.8952 -19.91682 116.8952    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
121.82285 0.0 -121.82285 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 284.69719 -19.91682 284.69719    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 1828 2979 a(forev)n(er\015igh)n(t)1912
3097 y(exp)k(19)1857 3216 y Fc(W)1924 3228 y Fb(l)1968
3216 y Fd(=)19 b(4)p Fc(:)p Fd(11)1833 3338 y Fc(W)1900
3346 y Fb(w)1969 3338 y Fd(=)g(4)p Fc(:)p Fd(28)1870
3452 y Fc(T)1911 3464 y Fb(l)1955 3452 y Fd(=)g(7)p Fc(:)p
Fd(58)1852 3571 y Fc(A)1905 3583 y Fb(l)1949 3571 y Fd(=)h(8)p
Fc(:)p Fd(40)p 0 TeXcolorgray 1930 7279 a Fa(9)p 0 TeXcolorgray
eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 729 2770 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -272.67632 -34.1432 -272.67632 -34.1432 -28.45274 -125.16324 0.0
-125.16324 101.28735 -19.91682 101.28735 -19.91682 380.84024 0.0 380.84024
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -272.67632 34.1432 -272.67632 34.1432 -28.45274 125.16324 0.0 125.16324
101.28735 19.91682 101.28735 19.91682 380.84024 0.0 380.84024    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 380.84024    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 101.28735 -19.91682 101.28735    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
125.16324 0.0 -125.16324 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 309.70839 -19.91682 309.70839    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 545 3229 a Fd(forev)n(er\015igh)n(t)628
3347 y(exp)24 b(20)574 3466 y Fc(W)641 3478 y Fb(l)684
3466 y Fd(=)c(3)p Fc(:)p Fd(56)549 3589 y Fc(W)616 3597
y Fb(w)685 3589 y Fd(=)g(4)p Fc(:)p Fd(40)587 3703 y
Fc(T)628 3715 y Fb(l)671 3703 y Fd(=)g(9)p Fc(:)p Fd(58)569
3821 y Fc(A)622 3833 y Fb(l)666 3821 y Fd(=)f(9)p Fc(:)p
Fd(83)2434 3594 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -173.40994 -34.1432 -173.40994 -34.1432 -28.45274 -80.15575 0.0
-80.15575 179.47725 -19.91682 179.47725 -19.91682 485.23962 0.0 485.23962
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -173.40994 34.1432 -173.40994 34.1432 -28.45274 80.15575 0.0 80.15575
179.47725 19.91682 179.47725 19.91682 485.23962 0.0 485.23962    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 485.23962    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 179.47725 -19.91682 179.47725    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
80.15575 0.0 -80.15575 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 414.10776 -19.91682 414.10776    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 2249 4053 a(forev)n(er\015igh)n(t)2333
4171 y(exp)24 b(21)2278 4291 y Fc(W)2345 4303 y Fb(l)2389
4291 y Fd(=)19 b(6)p Fc(:)p Fd(31)2254 4413 y Fc(W)2321
4421 y Fb(w)2390 4413 y Fd(=)g(2)p Fc(:)p Fd(82)2291
4527 y Fc(T)2332 4539 y Fb(l)2376 4527 y Fd(=)h(6)p Fc(:)p
Fd(09)2256 4645 y Fc(A)2309 4657 y Fb(l)2353 4645 y Fd(=)f(10)p
Fc(:)p Fd(75)p 0 TeXcolorgray 1910 7279 a Fa(10)p 0 TeXcolorgray
eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 719 4342 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -159.80876 -34.1432 -159.80876 -34.1432 -28.45274 -124.00578 0.0
-124.00578 143.25185 -19.91682 143.25185 -19.91682 389.12912 0.0 389.12912
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -159.80876 34.1432 -159.80876 34.1432 -28.45274 124.00578 0.0 124.00578
143.25185 19.91682 143.25185 19.91682 389.12912 0.0 389.12912    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 389.12912    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 143.25185 -19.91682 143.25185    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
124.00578 0.0 -124.00578 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 317.99725 -19.91682 317.99725    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 535 4801 a Fd(forev)n(er\015igh)n(t)618
4919 y(exp)25 b(22)564 5038 y Fc(W)631 5050 y Fb(l)675
5038 y Fd(=)19 b(5)p Fc(:)p Fd(03)540 5160 y Fc(W)607
5168 y Fb(w)676 5160 y Fd(=)g(4)p Fc(:)p Fd(36)577 5274
y Fc(T)618 5286 y Fb(l)662 5274 y Fd(=)g(5)p Fc(:)p Fd(62)559
5393 y Fc(A)612 5405 y Fb(l)656 5393 y Fd(=)g(8)p Fc(:)p
Fd(64)2399 3508 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -260.27382 -34.1432 -260.27382 -34.1432 -28.45274 -78.24547 0.0
-78.24547 179.03355 -19.91682 179.03355 -19.91682 474.83293 0.0 474.83293
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -260.27382 34.1432 -260.27382 34.1432 -28.45274 78.24547 0.0 78.24547
179.03355 19.91682 179.03355 19.91682 474.83293 0.0 474.83293    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 474.83293    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 179.03355 -19.91682 179.03355    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
78.24547 0.0 -78.24547 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 403.70108 -19.91682 403.70108    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 2214 3967 a(forev)n(er\015igh)n(t)2298
4085 y(exp)24 b(23)2243 4204 y Fc(W)2310 4216 y Fb(l)2354
4204 y Fd(=)19 b(6)p Fc(:)p Fd(29)2219 4326 y Fc(W)2286
4334 y Fb(w)2355 4326 y Fd(=)g(2)p Fc(:)p Fd(75)2256
4440 y Fc(T)2297 4452 y Fb(l)2341 4440 y Fd(=)g(9)p Fc(:)p
Fd(15)2221 4559 y Fc(A)2274 4571 y Fb(l)2317 4559 y Fd(=)h(10)p
Fc(:)p Fd(40)p 0 TeXcolorgray 1910 7279 a Fa(11)p 0 TeXcolorgray
eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 336 3856 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -156.33769 -34.1432 -156.33769 -34.1432 -28.45274 -77.87123 0.0
-77.87123 163.1791 -19.91682 163.1791 -19.91682 411.73727 0.0 411.73727
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -156.33769 34.1432 -156.33769 34.1432 -28.45274 77.87123 0.0 77.87123
163.1791 19.91682 163.1791 19.91682 411.73727 0.0 411.73727    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 411.73727    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 163.1791 -19.91682 163.1791    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
77.87123 0.0 -77.87123 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 340.60542 -19.91682 340.60542    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 152 4316 a Fd(forev)n(er\015igh)n(t)235
4434 y(exp)25 b(24)181 4553 y Fc(W)248 4565 y Fb(l)292
4553 y Fd(=)19 b(5)p Fc(:)p Fd(74)157 4675 y Fc(W)224
4683 y Fb(w)293 4675 y Fd(=)g(2)p Fc(:)p Fd(74)194 4789
y Fc(T)235 4801 y Fb(l)279 4789 y Fd(=)g(5)p Fc(:)p Fd(49)176
4907 y Fc(A)229 4919 y Fb(l)273 4907 y Fd(=)g(8)p Fc(:)p
Fd(74)2015 3230 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -231.79329 -34.1432 -231.79329 -34.1432 -28.45274 -124.36179 0.0
-124.36179 163.99184 -19.91682 163.99184 -19.91682 441.39697 0.0 441.39697
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -231.79329 34.1432 -231.79329 34.1432 -28.45274 124.36179 0.0 124.36179
163.99184 19.91682 163.99184 19.91682 441.39697 0.0 441.39697    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 441.39697    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 163.99184 -19.91682 163.99184    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
124.36179 0.0 -124.36179 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 370.2651 -19.91682 370.2651    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 1831 3689 a(forev)n(er\015igh)n(t)1914
3807 y(exp)25 b(25)1860 3927 y Fc(W)1927 3939 y Fb(l)1971
3927 y Fd(=)19 b(5)p Fc(:)p Fd(76)1836 4049 y Fc(W)1903
4057 y Fb(w)1972 4049 y Fd(=)g(4)p Fc(:)p Fd(37)1873
4163 y Fc(T)1914 4175 y Fb(l)1958 4163 y Fd(=)g(8)p Fc(:)p
Fd(15)1855 4281 y Fc(A)1908 4293 y Fb(l)1952 4281 y Fd(=)g(9)p
Fc(:)p Fd(75)p 0 TeXcolorgray 1910 7279 a Fa(12)p 0 TeXcolorgray
eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 656 3316 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -175.21907 -34.1432 -175.21907 -34.1432 -28.45274 -116.42154 0.0
-116.42154 161.17287 -19.91682 161.17287 -19.91682 451.7776 0.0 451.7776
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -175.21907 34.1432 -175.21907 34.1432 -28.45274 116.42154 0.0 116.42154
161.17287 19.91682 161.17287 19.91682 451.7776 0.0 451.7776    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 451.7776    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 161.17287 -19.91682 161.17287    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
116.42154 0.0 -116.42154 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 380.64574 -19.91682 380.64574    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 472 3776 a Fd(forev)n(er\015igh)n(t)555
3894 y(exp)25 b(26)501 4013 y Fc(W)568 4025 y Fb(l)612
4013 y Fd(=)19 b(5)p Fc(:)p Fd(66)477 4135 y Fc(W)544
4143 y Fb(w)613 4135 y Fd(=)g(4)p Fc(:)p Fd(09)514 4249
y Fc(T)555 4261 y Fb(l)599 4249 y Fd(=)g(6)p Fc(:)p Fd(16)479
4367 y Fc(A)532 4379 y Fb(l)575 4367 y Fd(=)h(10)p Fc(:)p
Fd(21)2219 3001 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -213.13464 -34.1432 -213.13464 -34.1432 -28.45274 -71.8126 0.0
-71.8126 100.8762 -19.91682 100.8762 -19.91682 369.02342 0.0 369.02342
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -213.13464 34.1432 -213.13464 34.1432 -28.45274 71.8126 0.0 71.8126
100.8762 19.91682 100.8762 19.91682 369.02342 0.0 369.02342    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 369.02342    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 100.8762 -19.91682 100.8762    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
71.8126 0.0 -71.8126 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 297.89157 -19.91682 297.89157    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 2035 3461 a(forev)n(er\015igh)n(t)2118
3579 y(exp)25 b(27)2064 3698 y Fc(W)2131 3710 y Fb(l)2174
3698 y Fd(=)20 b(3)p Fc(:)p Fd(55)2039 3820 y Fc(W)2106
3828 y Fb(w)2176 3820 y Fd(=)f(2)p Fc(:)p Fd(52)2077
3934 y Fc(T)2118 3946 y Fb(l)2162 3934 y Fd(=)g(7)p Fc(:)p
Fd(49)2059 4052 y Fc(A)2112 4064 y Fb(l)2156 4052 y Fd(=)g(9)p
Fc(:)p Fd(42)p 0 TeXcolorgray 1910 7279 a Fa(13)p 0 TeXcolorgray
eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 491 4029 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -187.00462 -34.1432 -187.00462 -34.1432 -28.45274 -96.50992 0.0
-96.50992 178.61243 -19.91682 178.61243 -19.91682 440.62808 0.0 440.62808
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -187.00462 34.1432 -187.00462 34.1432 -28.45274 96.50992 0.0 96.50992
178.61243 19.91682 178.61243 19.91682 440.62808 0.0 440.62808    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 440.62808    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 178.61243 -19.91682 178.61243    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
96.50992 0.0 -96.50992 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 369.49622 -19.91682 369.49622    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 307 4489 a Fd(forev)n(er\015igh)n(t)390
4607 y(exp)25 b(28)336 4726 y Fc(W)403 4738 y Fb(l)446
4726 y Fd(=)20 b(6)p Fc(:)p Fd(28)311 4848 y Fc(W)378
4856 y Fb(w)447 4848 y Fd(=)g(3)p Fc(:)p Fd(39)349 4962
y Fc(T)390 4974 y Fb(l)434 4962 y Fd(=)f(6)p Fc(:)p Fd(57)331
5080 y Fc(A)384 5092 y Fb(l)428 5080 y Fd(=)g(9)p Fc(:)p
Fd(21)1930 3480 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -253.17801 -34.1432 -253.17801 -34.1432 -28.45274 -76.79843 0.0
-76.79843 142.81032 -19.91682 142.81032 -19.91682 416.87593 0.0 416.87593
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -253.17801 34.1432 -253.17801 34.1432 -28.45274 76.79843 0.0 76.79843
142.81032 19.91682 142.81032 19.91682 416.87593 0.0 416.87593    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 416.87593    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 142.81032 -19.91682 142.81032    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
76.79843 0.0 -76.79843 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 345.74406 -19.91682 345.74406    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 1746 3939 a(forev)n(er\015igh)n(t)1829
4057 y(exp)24 b(29)1775 4176 y Fc(W)1842 4188 y Fb(l)1885
4176 y Fd(=)c(5)p Fc(:)p Fd(02)1750 4298 y Fc(W)1817
4306 y Fb(w)1886 4298 y Fd(=)g(2)p Fc(:)p Fd(70)1788
4413 y Fc(T)1829 4425 y Fb(l)1872 4413 y Fd(=)g(8)p Fc(:)p
Fd(90)1770 4531 y Fc(A)1823 4543 y Fb(l)1867 4531 y Fd(=)f(9)p
Fc(:)p Fd(63)3213 3867 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -206.49121 -34.1432 -206.49121 -34.1432 -28.45274 -77.77876 0.0
-77.77876 181.42921 -19.91682 181.42921 -19.91682 518.17154 0.0 518.17154
   /Lineto /lineto load def 0  setlinejoin false Line  gsave 0.56917
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 -206.49121 34.1432 -206.49121 34.1432 -28.45274 77.77876 0.0 77.77876
181.42921 19.91682 181.42921 19.91682 518.17154 0.0 518.17154    /Lineto
/lineto load def 0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
0.0 0.0 0.0 518.17154    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 181.42921 -19.91682 181.42921    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
77.77876 0.0 -77.77876 0.0    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0 
setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.56917 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
19.91682 447.03967 -19.91682 447.03967    /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  4.83691  2.84544 ] 0 0 add  DashLine  grestore end
 
@endspecial 3029 4327 a(forev)n(er\015igh)n(t)3112
4445 y(exp)25 b(30)3058 4564 y Fc(W)3125 4576 y Fb(l)3168
4564 y Fd(=)20 b(6)p Fc(:)p Fd(38)3033 4686 y Fc(W)3100
4694 y Fb(w)3170 4686 y Fd(=)f(2)p Fc(:)p Fd(73)3071
4800 y Fc(T)3112 4812 y Fb(l)3156 4800 y Fd(=)g(7)p Fc(:)p
Fd(26)3036 4918 y Fc(A)3089 4930 y Fb(l)3132 4918 y Fd(=)h(11)p
Fc(:)p Fd(84)p 0 TeXcolorgray 1910 7279 a Fa(14)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
